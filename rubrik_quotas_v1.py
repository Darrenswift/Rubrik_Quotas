##  Rubrik CDM supported releases - 5.1 & 5.2  
##  Created by:  Darren Swift contact darren.swift@rubrik.com
##  Script v1.0

import rubrik_cdm
import requests
import json
import urllib3
import ssl
import smtplib
import base64

s_limits_string = ''

#Define Soft and Hard Limits % of total available cluster storage
hLimits = 90
sLimits = 20

# ignore certificate verification messages
requests.packages.urllib3.disable_warnings()

# Rubrik CDM connection and authentication
rubrik = rubrik_cdm.Connect()

# GET call for AvailableStorage for Rubrik cluster
total_storage_usage = int(rubrik.get('internal', '/stats/available_storage')["value"])
print('Total available storage: ' + str(total_storage_usage))

# GET all Organizations within Rubrik Cluster 
org_info = rubrik.get('internal', '/organization?id={}')['data']
for x in range(len(org_info)):
    org_id = str((org_info[x]['id']))
    org_name = str((org_info[x]['name']))
    print('Checking '+ org_name + ' Organization for compliance . . .')

# Get total storage for each organization
    org_store = int(rubrik.get('internal',"/organization/"+ org_id +"/stats/total_storage_usage")['physical']['value'])
	
# Calculate percentage of storage used

    calc_pct_usage = (org_store)/(total_storage_usage)*100
    print(calc_pct_usage)

	#high limit

    if calc_pct_usage >= hLimits:
        print('*** HIGH LIMIT REACHED for '+ org_name +' **** Pausing SLAs')
        
        sla_info = rubrik.get('internal',"/organization/"+ org_id +"/sla_domain")['data']

        # Pause each High Limit SLA, If SLA(s) are already paused, 402 error will be generated

        for y in range(len(sla_info)):
            sla_id = str((sla_info[y]['id']))
            sla_name = str((sla_info[y]['name']))
            config = {}
            config['isPaused'] = True
            url = rubrik.post('v2','/sla_domain/' + sla_id + '/pause', config)


            sla_pause = requests.request("POST", url, headers=headers, data = payload, verify=False)
            print('Now Pausing ' + sla_name + ' for '+ org_name + ' organization. . .')
        

    elif sLimits <= calc_pct_usage <= hLimits:
        pass
        s_limits_string += '*** SOFT LIMIT REACHED for ' + org_name + ' **** Send Warning Messages\n'
        print('*** SOFT LIMIT REACHED for ' + org_name + ' **** Send Warning Messages')
        print('Email sent to ' + org_name + ' adminstrators . . .')

#Configure email settings as per below

print(s_limits_string)
port = 2525
smtp_server = "smtp.mailtrap.io"
login = "login" # your login generated by Mailtrap
password = "password" # your password generated by Mailtrap

# specify the sender’s and receiver’s email addresses
sender = "from@example.com"
receiver = "mailtrap@example.com"

# type your message: use two newlines (\n) to separate the subject from the message body, and use 'f' to  automatically insert variables in the text
message = f"""\
Subject: WARNING Soft Limit Reached on Rubrik Cluster
To: {receiver}
From: {sender}

WARNING Soft Limit reached for the following Organizations on Rubrik Cluster, this is a soft limit and will not impact any current backups. 
If your hard limit threshold is breached the SLA's reported in this email will be paused meaning backups will be paused.
{s_limits_string}
"""

try:
    #send your message with credentials specified above
    with smtplib.SMTP(smtp_server, port) as server:
        server.login(login, password)
        server.sendmail(sender, receiver, message)

    # tell the script to report if your message was sent or which errors need to be fixed 
    print('Sent')
except (gaierror, ConnectionRefusedError):
    print('Failed to connect to the server. Bad connection settings?')
except smtplib.SMTPServerDisconnected:
    print('Failed to connect to the server. Wrong user/password?')
except smtplib.SMTPException as e:
    print('SMTP error occurred: ' + str(e))


server.quit()
